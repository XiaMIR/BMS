<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，作用就是对sql进行分类化管理，理解sql隔离 注意：使用 namespace 代理方法来发，namespace 
	有特殊重要作用 -->
<mapper namespace="test">
	<!-- 映射文件中配置很多sql语句，通过select 执行数据查询 id 表示映射文件中的sql，称为statement的id 将sql语句封装到mappedStatement对象中 
		，所以将id称为Statement的id paramenterType :指定输入参数类型，这里指定得是int型 #{}表示一个占位符 #{id}：其中id表示接受输入的参数，参数的名称就是id 
		如果输入的简单类型 ，#{}的参数名可以是任意，可以使value或其他名称 resultType: 指定sql输出结果，所映射的java对象类型，select指定resultType表示单条记录映射的java对象 -->
	<!-- 需求：通过ID查询用户表的记录 -->
	<!-- <select id="findById" parameterType="java.lang.String" resultType="com.woniuxy.po.User"> 
		sql的查询语句 SELECT * FROM users WHERE id =#{value} </select> -->
	<!-- 根据用户名模糊查询用户信息，可以返回多条 resultType：指定就是单挑记录所映射的java对象类型 ${}:表示拼接sql串，将接收到的参数的内容不加任何修拼接在SQL中 
		使用${}拼接sql，引起sql注入 ${value}:接受输入参数内容，如果传入简单类型，${}中只能使用value -->

	<select id="findByName" parameterType="java.lang.String"
		resultType="po.User">
		SELECT*FROM users WHERE `name` LIKE '%${value}%'
	</select>

	<!-- 添加用户 parameterType:指定输入的参数类型pojo（pojo才包括用户信息） #{}中指定pojo属性值，接收到pojo对象属性值 
		Mybatis也是通过OGNL来获取对象属性值 -->
	<insert id="insertUser" parameterType="po.User">
		<!-- 插入数据的主键返回，返回到user对象中 方法SELECT LAST_INSERT_ID()得到刚insert插入进去的主键，注意：只适应于自增 
			keyProperty ：将查询到的主键设置到parameterType指定的对象的那个属性 order：LAST_INSERT_ID()执行顺序。相对于insert语句来说它的执行顺序 
			resultType:指定结果类型 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into
		users(name,birthday,sex,address)value(#{name},#{birthday},#{sex},#{address})

		<!-- 使用 mysql UUID（）生成主键 ，执行过程：首先：通过UUID（）得到主键，将主键设置到users对像的属性中，其次：再insert执行时，从users对象中取出id属性值 -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String"> 
			SELECT UUID() </selectKey> insert into users(id,name,birthday,sex,address)value(#{id},#{name},#{birthday},#{sex},#{address}) -->
	</insert>

	<!-- 删除用户 -->
	<!-- 根据id删除用户 parameterType输入一个id值  -->
	<delete id="deleteUser" parameterType="java.lang.Integer" >
	DELETE FROM users WHERE id=#{id}
	</delete>


	<!-- 更新用户 -->
	<!-- 分析：
	传入id、用户更新信息
	parameterType：指定User对象，对象就包括了id 和更新信息 注意：id必须存在
	#{id}从User对象中获得id属性值
	 -->
	
	<update id="updateUser" parameterType="po.User" >
		UPDATE users SET name=#{name},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
	</update>

</mapper>